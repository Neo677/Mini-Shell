	the easyes way to split the input is :
	1) take the input in a **char
	2) check if there is simple quote or double 
		(for ; & // not mandatory to work with it so just display an error)
	   use fonction for check the quote ou double 
		(because if there is no end to the quote like : 
		"... we need to printf everything like this is an str)
	4) if there is rediction etc ...
		we need to flag it and tell the exec there is this
	5)		enum list reference all the mandatory part of minishell dude :
		TOKEN_WORD,		 =====     simple word(ex : "ls", "echo", "file.txt")
		TOKEN_PIPE,		 =====     pipe '|'
		TOKEN_IN,		 =====     Redirections '<'
		TOKEN_OUT,		 =====     Redirections '>'
		TOKEN_APPEND,	 =====     Redirection en mode append '>>'
		TOKEN_HEREDOC,	 =====     Heredoc '<<'
		TOKEN_ENV_VAR,	 =====     Varibales d'envrionnement ('$VAR')
		TOKEN_QUOTE,	 =====     simple quote '\''
		TOKEN_DBL_QUOTE, =====     double quote '"'
		TOKEN_END,		 =====     fin de commande ou d'entrée 
*/

typedef enum e_token_arg
{
	TOKEN_WORD,	
	TOKEN_PIPE,
	TOKEN_IN,
	TOKEN_OUT,
	TOKEN_APPEND,
	TOKEN_HEREDOC,
	TOKEN_ENV_VAR,
	TOKEN_QUOTE,
	TOKEN_DBL_QUOTE,
	TOKEN_END,
	TOKEN_ERROR,
}		t_token_arg;

/*
		chain list for handle the token
		type ==  type du token in enum ⬆️
		valeur == valeur du token
		next == ptr for next token (chain list)
*/

typedef struct s_token
{
	t_token_arg		type;
	char			*value;
	struct s_token	*next;
}		t_token;

typedef struct s_redirections
{
	int						type;
	char					*file;
	struct s_redirections	*next;
}		t_redirections;

/*
		main structure for the command
	char **arg == tab de tab for the arguments of the command
	t_redirections *redirections == list of redirections associed to the command
	int 	p_pipe ==  1 si un pipe suit cette commande
	struct s_command *next == ptr for the next command (pipeline)
*/
typedef struct s_command
{
	char				**arg;
	t_redirections		*redirections;
	int					p_pipe;
	struct s_command	*next;
}		t_command;